BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE USAGELOG CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE BILL CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE RESOURCEALLOCATION CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE RESOURCETABLE CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE PRICINGDETAIL CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE RESOURCETYPE CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE PRICINGPLAN CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE CLIENT CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE USERTABLE CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE ROLE CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE REGION CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE STATE_REGION_MAPPING CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

-- Create ROLE table
CREATE TABLE ROLE (
    ROLEID NUMBER(10,0) PRIMARY KEY,
    ROLENAME VARCHAR2(50 BYTE) NOT NULL,
    PERMISSIONS VARCHAR2(200 BYTE)
);

-- Create REGION table
CREATE TABLE REGION (
    REGION_ID NUMBER(10,0) PRIMARY KEY,
    REGION_NAME VARCHAR2(50 BYTE) NOT NULL
);

-- Create STATE_REGION_MAPPING table
CREATE TABLE STATE_REGION_MAPPING (
    STATE_CODE VARCHAR2(2 BYTE) PRIMARY KEY,
    REGION_ID NUMBER(10,0),
    FOREIGN KEY (REGION_ID) REFERENCES REGION(REGION_ID)
);

-- Create USERTABLE table
CREATE TABLE USERTABLE (
    USERID NUMBER(10,0) PRIMARY KEY,
    USERNAME VARCHAR2(50 BYTE) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(100 BYTE) NOT NULL,
    ROLEID NUMBER(10,0),
    FOREIGN KEY (ROLEID) REFERENCES ROLE (ROLEID)
);

-- Create CLIENT table (no REGION_ID to avoid transitive dependency)
CREATE TABLE CLIENT (
    CLIENTID NUMBER(10,0) PRIMARY KEY,
    FIRSTNAME VARCHAR2(50 BYTE) NOT NULL,
    LASTNAME VARCHAR2(50 BYTE) NOT NULL,
    EMAIL VARCHAR2(200 BYTE) UNIQUE NOT NULL,
    PHONENUMBER VARCHAR2(15 BYTE),
    COMPANYNAME VARCHAR2(100 BYTE),
    STREET VARCHAR2(200 BYTE),
    STATE VARCHAR2(2 BYTE),
    CITY VARCHAR2(40 BYTE),
    ZIPCODE VARCHAR2(10 BYTE),
    USERNAME VARCHAR2(50 BYTE) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(100 BYTE) NOT NULL,
    FOREIGN KEY (STATE) REFERENCES STATE_REGION_MAPPING (STATE_CODE)
);

-- Create PRICINGPLAN table
CREATE TABLE PRICINGPLAN (
    PLANID NUMBER(10,0) PRIMARY KEY,
    PLANNAME VARCHAR2(50 BYTE) NOT NULL,
    DESCRIPTION VARCHAR2(200 BYTE)
);

-- Create RESOURCETYPE table
CREATE TABLE RESOURCETYPE (
    RESOURCETYPEID NUMBER(10,0) PRIMARY KEY,
    TYPENAME VARCHAR2(50 BYTE) NOT NULL,
    DESCRIPTION VARCHAR2(200 BYTE),
    ELIGIBLEFORPROMOTION VARCHAR2(10 BYTE) CHECK (ELIGIBLEFORPROMOTION IN ('Yes', 'No'))
);

-- Create PRICINGDETAIL table
CREATE TABLE PRICINGDETAIL (
    DETAILID NUMBER(10,0) PRIMARY KEY,
    PLANID NUMBER(10,0) NOT NULL,
    RESOURCETYPEID NUMBER(10,0) NOT NULL,
    UNITPRICE FLOAT(126),
    FOREIGN KEY (PLANID) REFERENCES PRICINGPLAN (PLANID),
    FOREIGN KEY (RESOURCETYPEID) REFERENCES RESOURCETYPE (RESOURCETYPEID)
);

-- Create RESOURCETABLE table
CREATE TABLE RESOURCETABLE (
    RESOURCEID NUMBER(10,0) PRIMARY KEY,
    RESOURCETYPEID NUMBER(10,0) NOT NULL,
    CAPACITY NUMBER(10,0),
    STATUS VARCHAR2(20 BYTE) CHECK (STATUS IN ('Available', 'In Use', 'Maintenance', 'Unavailable')),
    QUANTITYONHAND NUMBER(10,0),
    THRESHOLDVALUE NUMBER(10,0),
    ZONE VARCHAR2(40 BYTE),
    FOREIGN KEY (RESOURCETYPEID) REFERENCES RESOURCETYPE (RESOURCETYPEID)
);

-- Create RESOURCEALLOCATION table
CREATE TABLE RESOURCEALLOCATION (
    ALLOCATIONID NUMBER(10,0) PRIMARY KEY,
    CLIENTID NUMBER(10,0) NOT NULL,
    RESOURCEID NUMBER(10,0) NOT NULL,
    REQUESTDATE DATE,
    ALLOCATIONDATE DATE,
    EXPIRATIONDATE DATE,
    STATUS VARCHAR2(20 BYTE) CHECK (STATUS IN ('Pending', 'Approved', 'Expired', 'Rejected')),
    FOREIGN KEY (CLIENTID) REFERENCES CLIENT (CLIENTID),
    FOREIGN KEY (RESOURCEID) REFERENCES RESOURCETABLE (RESOURCEID)
);

-- Create BILL table
CREATE TABLE BILL (
    BILLID NUMBER(10,0) PRIMARY KEY,
    BILLPERIODSTART DATE,
    BILLPERIODEND DATE,
    TOTALAMOUNT FLOAT(126),
    STATUS VARCHAR2(20 BYTE) CHECK (STATUS IN ('Paid', 'Unpaid', 'Pending'))
);

-- Create USAGELOG table
CREATE TABLE USAGELOG (
    LOGID NUMBER(10,0) PRIMARY KEY,
    ALLOCATIONID NUMBER(10,0) NOT NULL,
    STARTTIME TIMESTAMP,
    ENDTIME TIMESTAMP,
    USAGEAMOUNT FLOAT(126),
    BILLID NUMBER(10,0),
    TOTALCOST FLOAT(126),
    FOREIGN KEY (ALLOCATIONID) REFERENCES RESOURCEALLOCATION (ALLOCATIONID),
    FOREIGN KEY (BILLID) REFERENCES BILL (BILLID)
);